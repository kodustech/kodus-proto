{"version":3,"file":"analyzer.js","sourceRoot":"","sources":["../../gen/NestJs/kodus/ast/v2/analyzer.ts"],"names":[],"mappings":";;;AAuEA,kFAaC;AA7ED,yDAAqE;AAgErE,SAAgB,mCAAmC;IACjD,OAAO,UAAU,WAAqB;QACpC,MAAM,WAAW,GAAa,CAAC,sBAAsB,EAAE,kBAAkB,EAAE,WAAW,EAAE,SAAS,CAAC,CAAC;QACnG,KAAK,MAAM,MAAM,IAAI,WAAW,EAAE,CAAC;YACjC,MAAM,UAAU,GAAQ,OAAO,CAAC,wBAAwB,CAAC,WAAW,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;YACxF,IAAA,0BAAU,EAAC,oBAAoB,EAAE,MAAM,CAAC,CAAC,WAAW,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,MAAM,EAAE,UAAU,CAAC,CAAC;QAC9F,CAAC;QACD,MAAM,iBAAiB,GAAa,EAAE,CAAC;QACvC,KAAK,MAAM,MAAM,IAAI,iBAAiB,EAAE,CAAC;YACvC,MAAM,UAAU,GAAQ,OAAO,CAAC,wBAAwB,CAAC,WAAW,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;YACxF,IAAA,gCAAgB,EAAC,oBAAoB,EAAE,MAAM,CAAC,CAAC,WAAW,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,MAAM,EAAE,UAAU,CAAC,CAAC;QACpG,CAAC;IACH,CAAC,CAAC;AACJ,CAAC;AAEY,QAAA,yBAAyB,GAAG,oBAAoB,CAAC","sourcesContent":["// Code generated by protoc-gen-ts_proto. DO NOT EDIT.\n// versions:\n//   protoc-gen-ts_proto  v2.7.0\n//   protoc               unknown\n// source: kodus/ast/v2/analyzer.proto\n\n/* eslint-disable */\nimport { GrpcMethod, GrpcStreamMethod } from \"@nestjs/microservices\";\nimport { Observable } from \"rxjs\";\nimport { RepositoryData } from \"./repo\";\n\nexport interface InitializeRepositoryRequest {\n  baseRepo: RepositoryData | undefined;\n  headRepo: RepositoryData | undefined;\n}\n\nexport interface InitializeRepositoryResponse {\n}\n\nexport interface DeleteRepositoryRequest {\n  baseRepo: RepositoryData | undefined;\n  headRepo: RepositoryData | undefined;\n}\n\nexport interface DeleteRepositoryResponse {\n}\n\nexport interface GetGraphsRequest {\n  baseRepo: RepositoryData | undefined;\n  headRepo: RepositoryData | undefined;\n}\n\nexport interface GetGraphsResponse {\n  data: Uint8Array;\n  isLast: boolean;\n}\n\nexport interface GetDiffRequest {\n  baseRepo: RepositoryData | undefined;\n  headRepo: RepositoryData | undefined;\n}\n\nexport interface GetDiffResponse {\n  data: Uint8Array;\n  isLast: boolean;\n}\n\nexport interface ASTAnalyzerServiceClient {\n  initializeRepository(request: InitializeRepositoryRequest): Observable<InitializeRepositoryResponse>;\n\n  deleteRepository(request: DeleteRepositoryRequest): Observable<DeleteRepositoryResponse>;\n\n  getGraphs(request: GetGraphsRequest): Observable<GetGraphsResponse>;\n\n  getDiff(request: GetDiffRequest): Observable<GetDiffResponse>;\n}\n\nexport interface ASTAnalyzerServiceController {\n  initializeRepository(\n    request: InitializeRepositoryRequest,\n  ): Promise<InitializeRepositoryResponse> | Observable<InitializeRepositoryResponse> | InitializeRepositoryResponse;\n\n  deleteRepository(\n    request: DeleteRepositoryRequest,\n  ): Promise<DeleteRepositoryResponse> | Observable<DeleteRepositoryResponse> | DeleteRepositoryResponse;\n\n  getGraphs(request: GetGraphsRequest): Observable<GetGraphsResponse>;\n\n  getDiff(request: GetDiffRequest): Observable<GetDiffResponse>;\n}\n\nexport function ASTAnalyzerServiceControllerMethods() {\n  return function (constructor: Function) {\n    const grpcMethods: string[] = [\"initializeRepository\", \"deleteRepository\", \"getGraphs\", \"getDiff\"];\n    for (const method of grpcMethods) {\n      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);\n      GrpcMethod(\"ASTAnalyzerService\", method)(constructor.prototype[method], method, descriptor);\n    }\n    const grpcStreamMethods: string[] = [];\n    for (const method of grpcStreamMethods) {\n      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);\n      GrpcStreamMethod(\"ASTAnalyzerService\", method)(constructor.prototype[method], method, descriptor);\n    }\n  };\n}\n\nexport const AST_ANALYZER_SERVICE_NAME = \"ASTAnalyzerService\";\n"]}