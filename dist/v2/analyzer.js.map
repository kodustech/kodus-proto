{"version":3,"file":"analyzer.js","sourceRoot":"","sources":["../../gen/NestJs/kodus/ast/v2/analyzer.ts"],"names":[],"mappings":";;;AAiJA,kFAaC;AAvJD,yDAAqE;AA0IrE,SAAgB,mCAAmC;IACjD,OAAO,UAAU,WAAqB;QACpC,MAAM,WAAW,GAAa,CAAC,sBAAsB,EAAE,kBAAkB,EAAE,WAAW,EAAE,oBAAoB,CAAC,CAAC;QAC9G,KAAK,MAAM,MAAM,IAAI,WAAW,EAAE,CAAC;YACjC,MAAM,UAAU,GAAQ,OAAO,CAAC,wBAAwB,CAAC,WAAW,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;YACxF,IAAA,0BAAU,EAAC,oBAAoB,EAAE,MAAM,CAAC,CAAC,WAAW,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,MAAM,EAAE,UAAU,CAAC,CAAC;QAC9F,CAAC;QACD,MAAM,iBAAiB,GAAa,EAAE,CAAC;QACvC,KAAK,MAAM,MAAM,IAAI,iBAAiB,EAAE,CAAC;YACvC,MAAM,UAAU,GAAQ,OAAO,CAAC,wBAAwB,CAAC,WAAW,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;YACxF,IAAA,gCAAgB,EAAC,oBAAoB,EAAE,MAAM,CAAC,CAAC,WAAW,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,MAAM,EAAE,UAAU,CAAC,CAAC;QACpG,CAAC;IACH,CAAC,CAAC;AACJ,CAAC;AAEY,QAAA,yBAAyB,GAAG,oBAAoB,CAAC","sourcesContent":["// Code generated by protoc-gen-ts_proto. DO NOT EDIT.\n// versions:\n//   protoc-gen-ts_proto  v2.7.0\n//   protoc               unknown\n// source: kodus/ast/v2/analyzer.proto\n\n/* eslint-disable */\nimport { GrpcMethod, GrpcStreamMethod } from \"@nestjs/microservices\";\nimport { Observable } from \"rxjs\";\nimport { EnrichGraph } from \"./enriched\";\nimport { CodeGraph } from \"./graph\";\nimport { RepositoryData } from \"./repo\";\n\n/** Request for initializing a repository pair */\nexport interface InitializeRepositoryRequest {\n  /** The base repository to initialize */\n  baseRepo:\n    | RepositoryData\n    | undefined;\n  /** The head repository to initialize */\n  headRepo: RepositoryData | undefined;\n}\n\n/** Response for initializing a repository pair */\nexport interface InitializeRepositoryResponse {\n}\n\n/** Request for deleting a repository pair */\nexport interface DeleteRepositoryRequest {\n  /** The base repository to delete */\n  baseRepo:\n    | RepositoryData\n    | undefined;\n  /** The head repository to delete */\n  headRepo: RepositoryData | undefined;\n}\n\n/** Response for deleting a repository pair */\nexport interface DeleteRepositoryResponse {\n}\n\n/** Request for getting graphs for a repository pair */\nexport interface GetGraphsRequest {\n  baseRepo: RepositoryData | undefined;\n  headRepo: RepositoryData | undefined;\n}\n\n/** Response for getting graphs for a repository pair */\nexport interface GetGraphsResponse {\n  /** Serialized graph data */\n  data: Uint8Array;\n  /** Indicates if this is the last chunk of data */\n  isLast: boolean;\n}\n\n/** Deserialized response data for GetGraphs */\nexport interface GetGraphsResponseData {\n  /** Graph for the base repository */\n  baseGraph:\n    | CodeGraph\n    | undefined;\n  /** Graph for the head repository */\n  headGraph:\n    | CodeGraph\n    | undefined;\n  /** Enriched graph for the head repository */\n  enrichHeadGraph: EnrichGraph | undefined;\n}\n\n/** Request for getting relevant file content based on a diff */\nexport interface GetContentFromDiffRequest {\n  /** The head repository to compare against */\n  headRepo:\n    | RepositoryData\n    | undefined;\n  /** The base repository to compare against */\n  baseRepo:\n    | RepositoryData\n    | undefined;\n  /** Diff in unified diff format */\n  diff: string;\n  /** Relative path to the file in the head repository */\n  filePath: string;\n}\n\n/** Response for getting relevant file content based on a diff */\nexport interface GetContentFromDiffResponse {\n  /** Serialized diff data */\n  data: Uint8Array;\n  /** Indicates if this is the last chunk of data */\n  isLast: boolean;\n}\n\n/** Generic streamed response for large data transfers */\nexport interface StreamedResponse {\n  /** Serialized data for the response */\n  data: Uint8Array;\n  /** Indicates if this is the last chunk of data */\n  isLast: boolean;\n}\n\n/** The ASTAnalyzerService provides methods for analyzing code repositories */\n\nexport interface ASTAnalyzerServiceClient {\n  /** Initializes a repository pair for analysis */\n\n  initializeRepository(request: InitializeRepositoryRequest): Observable<InitializeRepositoryResponse>;\n\n  /** Deletes a repository pair from analysis */\n\n  deleteRepository(request: DeleteRepositoryRequest): Observable<DeleteRepositoryResponse>;\n\n  /** Retrieves graphs for an initialized repository pair */\n\n  getGraphs(request: GetGraphsRequest): Observable<GetGraphsResponse>;\n\n  /** Retrieves relevant file content based on a diff */\n\n  getContentFromDiff(request: GetContentFromDiffRequest): Observable<GetContentFromDiffResponse>;\n}\n\n/** The ASTAnalyzerService provides methods for analyzing code repositories */\n\nexport interface ASTAnalyzerServiceController {\n  /** Initializes a repository pair for analysis */\n\n  initializeRepository(\n    request: InitializeRepositoryRequest,\n  ): Promise<InitializeRepositoryResponse> | Observable<InitializeRepositoryResponse> | InitializeRepositoryResponse;\n\n  /** Deletes a repository pair from analysis */\n\n  deleteRepository(\n    request: DeleteRepositoryRequest,\n  ): Promise<DeleteRepositoryResponse> | Observable<DeleteRepositoryResponse> | DeleteRepositoryResponse;\n\n  /** Retrieves graphs for an initialized repository pair */\n\n  getGraphs(request: GetGraphsRequest): Observable<GetGraphsResponse>;\n\n  /** Retrieves relevant file content based on a diff */\n\n  getContentFromDiff(request: GetContentFromDiffRequest): Observable<GetContentFromDiffResponse>;\n}\n\nexport function ASTAnalyzerServiceControllerMethods() {\n  return function (constructor: Function) {\n    const grpcMethods: string[] = [\"initializeRepository\", \"deleteRepository\", \"getGraphs\", \"getContentFromDiff\"];\n    for (const method of grpcMethods) {\n      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);\n      GrpcMethod(\"ASTAnalyzerService\", method)(constructor.prototype[method], method, descriptor);\n    }\n    const grpcStreamMethods: string[] = [];\n    for (const method of grpcStreamMethods) {\n      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);\n      GrpcStreamMethod(\"ASTAnalyzerService\", method)(constructor.prototype[method], method, descriptor);\n    }\n  };\n}\n\nexport const AST_ANALYZER_SERVICE_NAME = \"ASTAnalyzerService\";\n"]}