{"version":3,"file":"analyzer.js","sourceRoot":"","sources":["../../../../../../gen/NestJs/kodus/ast/v1/analyzer.ts"],"names":[],"mappings":";AAAA,sDAAsD;AACtD,YAAY;AACZ,gCAAgC;AAChC,iCAAiC;AACjC,sCAAsC;;;AAgEtC,kFAaC;AA3ED,oBAAoB;AACpB,yDAAqE;AAGrE,IAAY,iBAcX;AAdD,WAAY,iBAAiB;IAC3B,wFAAmE,CAAA;IACnE,8EAAyD,CAAA;IACzD,8EAAyD,CAAA;IACzD,0EAAqD,CAAA;IACrD,4EAAuD,CAAA;IACvD,8EAAyD,CAAA;IACzD,gFAA2D,CAAA;IAC3D,gFAA2D,CAAA;IAC3D,0FAAqE,CAAA;IACrE,wFAAmE,CAAA;IACnE,oFAA+D,CAAA;IAC/D,oFAA+D,CAAA;IAC/D,kDAA6B,CAAA;AAC/B,CAAC,EAdW,iBAAiB,iCAAjB,iBAAiB,QAc5B;AAED,IAAY,aAKX;AALD,WAAY,aAAa;IACvB,4EAA2D,CAAA;IAC3D,gEAA+C,CAAA;IAC/C,gEAA+C,CAAA;IAC/C,8CAA6B,CAAA;AAC/B,CAAC,EALW,aAAa,6BAAb,aAAa,QAKxB;AAqCD,SAAgB,mCAAmC;IACjD,OAAO,UAAU,WAAqB;QACpC,MAAM,WAAW,GAAa,CAAC,oBAAoB,CAAC,CAAC;QACrD,KAAK,MAAM,MAAM,IAAI,WAAW,EAAE,CAAC;YACjC,MAAM,UAAU,GAAQ,OAAO,CAAC,wBAAwB,CAAC,WAAW,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;YACxF,IAAA,0BAAU,EAAC,oBAAoB,EAAE,MAAM,CAAC,CAAC,WAAW,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,MAAM,EAAE,UAAU,CAAC,CAAC;QAC9F,CAAC;QACD,MAAM,iBAAiB,GAAa,EAAE,CAAC;QACvC,KAAK,MAAM,MAAM,IAAI,iBAAiB,EAAE,CAAC;YACvC,MAAM,UAAU,GAAQ,OAAO,CAAC,wBAAwB,CAAC,WAAW,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;YACxF,IAAA,gCAAgB,EAAC,oBAAoB,EAAE,MAAM,CAAC,CAAC,WAAW,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,MAAM,EAAE,UAAU,CAAC,CAAC;QACpG,CAAC;IACH,CAAC,CAAC;AACJ,CAAC;AAEY,QAAA,yBAAyB,GAAG,oBAAoB,CAAC","sourcesContent":["// Code generated by protoc-gen-ts_proto. DO NOT EDIT.\n// versions:\n//   protoc-gen-ts_proto  v2.7.0\n//   protoc               unknown\n// source: kodus/ast/v1/analyzer.proto\n\n/* eslint-disable */\nimport { GrpcMethod, GrpcStreamMethod } from \"@nestjs/microservices\";\nimport { Observable } from \"rxjs\";\n\nexport enum ProtoPlatformType {\n  PROTO_PLATFORM_TYPE_UNSPECIFIED = \"PROTO_PLATFORM_TYPE_UNSPECIFIED\",\n  PROTO_PLATFORM_TYPE_GITHUB = \"PROTO_PLATFORM_TYPE_GITHUB\",\n  PROTO_PLATFORM_TYPE_GITLAB = \"PROTO_PLATFORM_TYPE_GITLAB\",\n  PROTO_PLATFORM_TYPE_JIRA = \"PROTO_PLATFORM_TYPE_JIRA\",\n  PROTO_PLATFORM_TYPE_SLACK = \"PROTO_PLATFORM_TYPE_SLACK\",\n  PROTO_PLATFORM_TYPE_NOTION = \"PROTO_PLATFORM_TYPE_NOTION\",\n  PROTO_PLATFORM_TYPE_MSTEAMS = \"PROTO_PLATFORM_TYPE_MSTEAMS\",\n  PROTO_PLATFORM_TYPE_DISCORD = \"PROTO_PLATFORM_TYPE_DISCORD\",\n  PROTO_PLATFORM_TYPE_AZURE_BOARDS = \"PROTO_PLATFORM_TYPE_AZURE_BOARDS\",\n  PROTO_PLATFORM_TYPE_AZURE_REPOS = \"PROTO_PLATFORM_TYPE_AZURE_REPOS\",\n  PROTO_PLATFORM_TYPE_KODUS_WEB = \"PROTO_PLATFORM_TYPE_KODUS_WEB\",\n  PROTO_PLATFORM_TYPE_BITBUCKET = \"PROTO_PLATFORM_TYPE_BITBUCKET\",\n  UNRECOGNIZED = \"UNRECOGNIZED\",\n}\n\nexport enum ProtoAuthMode {\n  PROTO_AUTH_MODE_UNSPECIFIED = \"PROTO_AUTH_MODE_UNSPECIFIED\",\n  PROTO_AUTH_MODE_OAUTH = \"PROTO_AUTH_MODE_OAUTH\",\n  PROTO_AUTH_MODE_TOKEN = \"PROTO_AUTH_MODE_TOKEN\",\n  UNRECOGNIZED = \"UNRECOGNIZED\",\n}\n\nexport interface BuildEnrichedGraphRequest {\n  baseRepo: RepositoryData | undefined;\n  headRepo: RepositoryData | undefined;\n}\n\nexport interface BuildEnrichedGraphResponse {\n  data: string;\n  code: number;\n  error?: string | undefined;\n}\n\nexport interface Auth {\n  type?: ProtoAuthMode | undefined;\n  token?: string | undefined;\n  org?: string | undefined;\n}\n\nexport interface RepositoryData {\n  url: string;\n  provider: ProtoPlatformType;\n  branch?: string | undefined;\n  auth?: Auth | undefined;\n  organizationId: string;\n  repositoryId: string;\n  repositoryName: string;\n}\n\nexport interface ASTAnalyzerServiceClient {\n  buildEnrichedGraph(request: BuildEnrichedGraphRequest): Observable<BuildEnrichedGraphResponse>;\n}\n\nexport interface ASTAnalyzerServiceController {\n  buildEnrichedGraph(request: BuildEnrichedGraphRequest): Observable<BuildEnrichedGraphResponse>;\n}\n\nexport function ASTAnalyzerServiceControllerMethods() {\n  return function (constructor: Function) {\n    const grpcMethods: string[] = [\"buildEnrichedGraph\"];\n    for (const method of grpcMethods) {\n      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);\n      GrpcMethod(\"ASTAnalyzerService\", method)(constructor.prototype[method], method, descriptor);\n    }\n    const grpcStreamMethods: string[] = [];\n    for (const method of grpcStreamMethods) {\n      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);\n      GrpcStreamMethod(\"ASTAnalyzerService\", method)(constructor.prototype[method], method, descriptor);\n    }\n  };\n}\n\nexport const AST_ANALYZER_SERVICE_NAME = \"ASTAnalyzerService\";\n"]}