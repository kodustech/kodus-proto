{"version":3,"file":"serializer.js","sourceRoot":"","sources":["../../../common/ast/serializer.ts"],"names":[],"mappings":";;;AAAA,mCAA+C;AAC/C,yCAAqE;AACrE,yCAQ0B;AAE1B,MAAa,aAAa;IACtB,kBAAkB,CAAC,KAAgB;QAC/B,MAAM,KAAK,GAAG,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;QACxD,MAAM,SAAS,GAAG,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC,CAAC;QAChE,MAAM,KAAK,GAAG,EAAE,CAAC;QAEjB,KAAK,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC;YAC9C,KAAK,CAAC,GAAG,CAAC,GAAG;gBACT,GAAG,IAAI;gBACP,IAAI,EAAE,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC;aAC3C,CAAC;QACN,CAAC;QAED,OAAO;YACH,KAAK,EAAE,KAAK;YACZ,SAAS,EAAE,SAAS;YACpB,KAAK,EAAE,KAAK;SACf,CAAC;IACN,CAAC;IAED,sBAAsB,CAAC,KAAkB;QACrC,MAAM,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CACzB,CAAC,CAAC,EAAE,EAAE,CACF,CAAC;YACG,GAAG,CAAC;YACJ,IAAI,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,IAAI,CAAC;SACT,CAAA,CACtC,CAAC;QAEF,MAAM,aAAa,GAAG,KAAK,CAAC,aAAa,CAAC,GAAG,CACzC,CAAC,CAAC,EAAE,EAAE,CACF,CAAC;YACG,GAAG,CAAC;YACJ,IAAI,EAAE,IAAI,CAAC,yBAAyB,CAAC,CAAC,CAAC,IAAI,CAAC;SACjB,CAAA,CACtC,CAAC;QAEF,OAAO;YACH,KAAK;YACL,aAAa;SAChB,CAAC;IACN,CAAC;IAEO,kBAAkB,CAAC,IAAe;QACtC,QAAQ,IAAI,EAAE,CAAC;YACX,KAAK,iBAAS,CAAC,WAAW;gBACtB,OAAO,cAAmB,CAAC,gBAAgB,CAAC;YAChD,KAAK,iBAAS,CAAC,eAAe;gBAC1B,OAAO,cAAmB,CAAC,oBAAoB,CAAC;YACpD,KAAK,iBAAS,CAAC,UAAU;gBACrB,OAAO,cAAmB,CAAC,eAAe,CAAC;YAC/C,KAAK,iBAAS,CAAC,gBAAgB;gBAC3B,OAAO,cAAmB,CAAC,qBAAqB,CAAC;YACrD,KAAK,iBAAS,CAAC,cAAc;gBACzB,OAAO,cAAmB,CAAC,mBAAmB,CAAC;YACnD,KAAK,iBAAS,CAAC,mBAAmB;gBAC9B,OAAO,cAAmB,CAAC,wBAAwB,CAAC;YACxD,KAAK,iBAAS,CAAC,yBAAyB;gBACpC,OAAO,cAAmB,CAAC,8BAA8B,CAAC;YAC9D,KAAK,iBAAS,CAAC,YAAY;gBACvB,OAAO,cAAmB,CAAC,iBAAiB,CAAC;YACjD;gBACI,OAAO,cAAmB,CAAC,sBAAsB,CAAC;QAC1D,CAAC;IACL,CAAC;IAEO,iBAAiB,CAAC,IAAc;QACpC,QAAQ,IAAI,EAAE,CAAC;YACX,KAAK,mBAAQ,CAAC,KAAK;gBACf,OAAO,aAAkB,CAAC,eAAe,CAAC;YAC9C,KAAK,mBAAQ,CAAC,MAAM;gBAChB,OAAO,aAAkB,CAAC,gBAAgB,CAAC;YAC/C,KAAK,mBAAQ,CAAC,QAAQ;gBAClB,OAAO,aAAkB,CAAC,kBAAkB,CAAC;YACjD,KAAK,mBAAQ,CAAC,SAAS;gBACnB,OAAO,aAAkB,CAAC,mBAAmB,CAAC;YAClD;gBACI,OAAO,aAAkB,CAAC,qBAAqB,CAAC;QACxD,CAAC;IACL,CAAC;IAEO,yBAAyB,CAC7B,IAAsB;QAEtB,QAAQ,IAAI,EAAE,CAAC;YACX,KAAK,2BAAgB,CAAC,KAAK;gBACvB,OAAO,qBAA0B,CAAC,uBAAuB,CAAC;YAC9D,KAAK,2BAAgB,CAAC,oBAAoB;gBACtC,OAAO,qBAA0B,CAAC,sCAAsC,CAAC;YAC7E,KAAK,2BAAgB,CAAC,UAAU;gBAC5B,OAAO,qBAA0B,CAAC,4BAA4B,CAAC;YACnE,KAAK,2BAAgB,CAAC,OAAO;gBACzB,OAAO,qBAA0B,CAAC,yBAAyB,CAAC;YAChE,KAAK,2BAAgB,CAAC,UAAU;gBAC5B,OAAO,qBAA0B,CAAC,4BAA4B,CAAC;YACnE,KAAK,2BAAgB,CAAC,cAAc;gBAChC,OAAO,qBAA0B,CAAC,gCAAgC,CAAC;YACvE,KAAK,2BAAgB,CAAC,OAAO;gBACzB,OAAO,qBAA0B,CAAC,yBAAyB,CAAC;YAChE;gBACI,OAAO,qBAA0B,CAAC,6BAA6B,CAAC;QACxE,CAAC;IACL,CAAC;CACJ;AAvGD,sCAuGC","sourcesContent":["import { CodeGraph, QueryType } from \"./graph\";\nimport { EnrichGraph, NodeType, RelationshipType } from \"./enriched\";\nimport {\n    CodeGraph as SerializedCodeGraph,\n    EnrichGraph as SerializedEnrichGraph,\n    EnrichGraphNode as SerializedEnrichGraphNode,\n    EnrichGraphEdge as SerializedEnrichGraphEdge,\n    QueryType as SerializedQueryType,\n    NodeType as SerializedNodeType,\n    RelationshipType as SerializedRelationshipType,\n} from \"@@g/kodus/ast/v2\";\n\nexport class ASTSerializer {\n    serializeCodeGraph(graph: CodeGraph): SerializedCodeGraph {\n        const files = Object.fromEntries(graph.files.entries());\n        const functions = Object.fromEntries(graph.functions.entries());\n        const types = {};\n\n        for (const [key, type] of graph.types.entries()) {\n            types[key] = {\n                ...type,\n                type: this.serializeQueryType(type.type),\n            };\n        }\n\n        return {\n            files: files,\n            functions: functions,\n            types: types,\n        };\n    }\n\n    serializeEnrichedGraph(graph: EnrichGraph): SerializedEnrichGraph {\n        const nodes = graph.nodes.map(\n            (n) =>\n                ({\n                    ...n,\n                    type: this.serializeNodeType(n.type),\n                } as SerializedEnrichGraphNode)\n        );\n\n        const relationships = graph.relationships.map(\n            (r) =>\n                ({\n                    ...r,\n                    type: this.serializeRelationshipType(r.type),\n                } as SerializedEnrichGraphEdge)\n        );\n\n        return {\n            nodes,\n            relationships,\n        };\n    }\n\n    private serializeQueryType(type: QueryType): SerializedQueryType {\n        switch (type) {\n            case QueryType.CLASS_QUERY:\n                return SerializedQueryType.QUERY_TYPE_CLASS;\n            case QueryType.INTERFACE_QUERY:\n                return SerializedQueryType.QUERY_TYPE_INTERFACE;\n            case QueryType.ENUM_QUERY:\n                return SerializedQueryType.QUERY_TYPE_ENUM;\n            case QueryType.TYPE_ALIAS_QUERY:\n                return SerializedQueryType.QUERY_TYPE_TYPE_ALIAS;\n            case QueryType.FUNCTION_QUERY:\n                return SerializedQueryType.QUERY_TYPE_FUNCTION;\n            case QueryType.FUNCTION_CALL_QUERY:\n                return SerializedQueryType.QUERY_TYPE_FUNCTION_CALL;\n            case QueryType.FUNCTION_PARAMETERS_QUERY:\n                return SerializedQueryType.QUERY_TYPE_FUNCTION_PARAMETERS;\n            case QueryType.IMPORT_QUERY:\n                return SerializedQueryType.QUERY_TYPE_IMPORT;\n            default:\n                return SerializedQueryType.QUERY_TYPE_UNSPECIFIED;\n        }\n    }\n\n    private serializeNodeType(type: NodeType): SerializedNodeType {\n        switch (type) {\n            case NodeType.CLASS:\n                return SerializedNodeType.NODE_TYPE_CLASS;\n            case NodeType.METHOD:\n                return SerializedNodeType.NODE_TYPE_METHOD;\n            case NodeType.FUNCTION:\n                return SerializedNodeType.NODE_TYPE_FUNCTION;\n            case NodeType.INTERFACE:\n                return SerializedNodeType.NODE_TYPE_INTERFACE;\n            default:\n                return SerializedNodeType.NODE_TYPE_UNSPECIFIED;\n        }\n    }\n\n    private serializeRelationshipType(\n        type: RelationshipType\n    ): SerializedRelationshipType {\n        switch (type) {\n            case RelationshipType.CALLS:\n                return SerializedRelationshipType.RELATIONSHIP_TYPE_CALLS;\n            case RelationshipType.CALLS_IMPLEMENTATION:\n                return SerializedRelationshipType.RELATIONSHIP_TYPE_CALLS_IMPLEMENTATION;\n            case RelationshipType.HAS_METHOD:\n                return SerializedRelationshipType.RELATIONSHIP_TYPE_HAS_METHOD;\n            case RelationshipType.IMPORTS:\n                return SerializedRelationshipType.RELATIONSHIP_TYPE_IMPORTS;\n            case RelationshipType.IMPLEMENTS:\n                return SerializedRelationshipType.RELATIONSHIP_TYPE_IMPLEMENTS;\n            case RelationshipType.IMPLEMENTED_BY:\n                return SerializedRelationshipType.RELATIONSHIP_TYPE_IMPLEMENTED_BY;\n            case RelationshipType.EXTENDS:\n                return SerializedRelationshipType.RELATIONSHIP_TYPE_EXTENDS;\n            default:\n                return SerializedRelationshipType.RELATIONSHIP_TYPE_UNSPECIFIED;\n        }\n    }\n}\n"]}