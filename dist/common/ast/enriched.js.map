{"version":3,"file":"enriched.js","sourceRoot":"","sources":["../../../common/ast/enriched.ts"],"names":[],"mappings":";;;AAEA,IAAY,QAKX;AALD,WAAY,QAAQ;IAChB,2BAAe,CAAA;IACf,6BAAiB,CAAA;IACjB,iCAAqB,CAAA;IACrB,mCAAuB,CAAA;AAC3B,CAAC,EALW,QAAQ,wBAAR,QAAQ,QAKnB;AAWD,IAAY,gBAQX;AARD,WAAY,gBAAgB;IACxB,mCAAe,CAAA;IACf,iEAA6C,CAAA;IAC7C,6CAAyB,CAAA;IACzB,uCAAmB,CAAA;IACnB,6CAAyB,CAAA;IACzB,qDAAiC,CAAA;IACjC,uCAAmB,CAAA;AACvB,CAAC,EARW,gBAAgB,gCAAhB,gBAAgB,QAQ3B","sourcesContent":["import { Range, SyntaxNode } from \"tree-sitter\";\n\nexport enum NodeType {\n    CLASS = \"CLASS\",\n    METHOD = \"METHOD\",\n    FUNCTION = \"FUNCTION\",\n    INTERFACE = \"INTERFACE\",\n}\n\nexport type EnrichGraphNode = {\n    id: number;\n    name: string;\n    position: Range;\n    type: NodeType;\n    file: string;\n    filePath: string;\n};\n\nexport enum RelationshipType {\n    CALLS = \"CALLS\",\n    CALLS_IMPLEMENTATION = \"CALLS_IMPLEMENTATION\",\n    HAS_METHOD = \"HAS_METHOD\",\n    IMPORTS = \"IMPORTS\",\n    IMPLEMENTS = \"IMPLEMENTS\",\n    IMPLEMENTED_BY = \"IMPLEMENTED_BY\",\n    EXTENDS = \"EXTENDS\",\n}\n\nexport type ImpactedNode = {\n    id: number;\n    name: string;\n    type: string;\n    severity: string;\n    level: number;\n    filePath: string;\n    calledBy?: string[];\n    importedBy?: string[];\n};\n\nexport type EnrichGraphEdge = {\n    from: number;\n    to: number;\n    type: RelationshipType;\n    fromPath: string;\n    toPath: string;\n};\n\nexport type EnrichGraph = {\n    nodes: EnrichGraphNode[];\n    relationships: EnrichGraphEdge[];\n};\n\nexport type ScopeAnalysis = {\n    variables: string[];\n    functions: string[];\n    dependencies: string[];\n};\n\nexport type ComplexityAnalysis = {\n    cyclomaticComplexity: number;\n    cognitiveComplexity: number;\n    details: {\n        conditionals: number;\n        loops: number;\n        switches: number;\n        catches: number;\n        logicalOperators: number;\n        recursion: boolean;\n    };\n};\n\nexport type ImpactResult = {\n    function: string;\n    impact: {\n        summary: any;\n        groupedByLevel: Record<string, ImpactedNode[]>;\n    };\n};\n\nexport type FunctionsAffect = {\n    functionName: string;\n    filePath: string;\n    functionBody: string;\n};\n\nexport type FunctionsAffectResult = {\n    oldFunction: string;\n    newFunction: string;\n    functionsAffect: FunctionsAffect[];\n};\n\nexport type FunctionSimilarity = {\n    functionName: string;\n    similarFunctions: [];\n};\n\nexport type ChangeResult = {\n    added: FunctionResult[];\n    modified: FunctionResult[];\n    deleted: FunctionResult[];\n};\n\nexport type FunctionResult = {\n    name: string;\n    fullName: string;\n    functionHash: string;\n    signatureHash: string;\n    node: SyntaxNode;\n    fullText: string;\n    lines: number;\n};\n"]}