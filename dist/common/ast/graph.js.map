{"version":3,"file":"graph.js","sourceRoot":"","sources":["../../../common/ast/graph.ts"],"names":[],"mappings":";;;AAEA,IAAY,SAYX;AAZD,WAAY,SAAS;IACjB,oCAAuB,CAAA;IAEvB,kCAAqB,CAAA;IACrB,0CAA6B,CAAA;IAC7B,gCAAmB,CAAA;IAEnB,sCAAyB,CAAA;IAEzB,wCAA2B,CAAA;IAC3B,kDAAqC,CAAA;IACrC,8DAAiD,CAAA;AACrD,CAAC,EAZW,SAAS,yBAAT,SAAS,QAYpB;AAED,IAAY,SAOX;AAPD,WAAY,SAAS;IACjB,0BAAa,CAAA;IACb,4BAAe,CAAA;IACf,oCAAuB,CAAA;IACvB,0BAAa,CAAA;IACb,kCAAqB,CAAA;IACrB,8BAAiB,CAAA;AACrB,CAAC,EAPW,SAAS,yBAAT,SAAS,QAOpB","sourcesContent":["import { Range } from \"tree-sitter\";\n\nexport enum QueryType {\n    IMPORT_QUERY = \"import\",\n\n    CLASS_QUERY = \"class\",\n    INTERFACE_QUERY = \"interface\",\n    ENUM_QUERY = \"enum\",\n\n    TYPE_ALIAS_QUERY = \"type\",\n\n    FUNCTION_QUERY = \"function\",\n    FUNCTION_CALL_QUERY = \"function_call\",\n    FUNCTION_PARAMETERS_QUERY = \"function_parameters\",\n}\n\nexport enum ScopeType {\n    FILE = \"file\",\n    CLASS = \"class\",\n    INTERFACE = \"interface\",\n    ENUM = \"enum\",\n    FUNCTION = \"function\",\n    METHOD = \"method\",\n}\n\nexport type Scope = {\n    type: ScopeType;\n    name: string;\n};\n\nexport type Call = {\n    nodeId: number;\n    function: string;\n    file: string;\n    caller?: string;\n};\n\nexport type AnalysisNode = {\n    text: string;\n    type: string;\n    queryType: QueryType;\n    id: number;\n    children?: AnalysisNode[];\n    position: Range;\n};\n\n/**\n * Analysis of a file with its definitions and calls\n */\nexport type FileAnalysis = {\n    defines: string[];\n    calls: Call[];\n    imports: string[];\n    className: string[];\n    usedBy?: {\n        files: string[]; // Files that import this file\n        functions: string[]; // Functions that use this file\n        types: string[]; // Types defined in this file\n    };\n    dependencies?: {\n        direct: string[]; // May include functions and imported files\n        transitive: string[]; // To be calculated later (simple example)\n    };\n};\n\n/**\n * Complete details of a defined function\n */\nexport type FunctionAnalysis = {\n    nodeId: number;\n    position: Range;\n    file: string;\n    name: string;\n    params: string[];\n    lines: number;\n    returnType: string;\n    calls: Call[];\n    className?: string;\n    startLine: number;\n    endLine: number;\n    functionHash: string;\n    signatureHash: string;\n    bodyNode?: any;\n    fullText?: string;\n};\n\n/**\n * Details of a type (interface, type alias, or enum)\n */\nexport type TypeAnalysis = {\n    nodeId: number;\n    position: Range;\n    file: string;\n    type: QueryType;\n    name: string;\n    fields: Record<string, string>;\n    implements: string[];\n    implementedBy: string[];\n    extends: string[];\n    extendedBy: string[];\n    scope: Scope[];\n};\n\n/**\n * Complete code graph\n */\nexport type CodeGraph = {\n    files: Map<string, FileAnalysis>;\n    functions: Map<string, FunctionAnalysis>;\n    types: Map<string, TypeAnalysis>;\n    analysisNodes: Map<number, AnalysisNode>;\n};\n"]}