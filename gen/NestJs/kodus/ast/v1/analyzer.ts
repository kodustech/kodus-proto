// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               unknown
// source: kodus/ast/v1/analyzer.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export enum ProtoPlatformType {
  PROTO_PLATFORM_TYPE_UNSPECIFIED = "PROTO_PLATFORM_TYPE_UNSPECIFIED",
  PROTO_PLATFORM_TYPE_GITHUB = "PROTO_PLATFORM_TYPE_GITHUB",
  PROTO_PLATFORM_TYPE_GITLAB = "PROTO_PLATFORM_TYPE_GITLAB",
  PROTO_PLATFORM_TYPE_JIRA = "PROTO_PLATFORM_TYPE_JIRA",
  PROTO_PLATFORM_TYPE_SLACK = "PROTO_PLATFORM_TYPE_SLACK",
  PROTO_PLATFORM_TYPE_NOTION = "PROTO_PLATFORM_TYPE_NOTION",
  PROTO_PLATFORM_TYPE_MSTEAMS = "PROTO_PLATFORM_TYPE_MSTEAMS",
  PROTO_PLATFORM_TYPE_DISCORD = "PROTO_PLATFORM_TYPE_DISCORD",
  PROTO_PLATFORM_TYPE_AZURE_BOARDS = "PROTO_PLATFORM_TYPE_AZURE_BOARDS",
  PROTO_PLATFORM_TYPE_AZURE_REPOS = "PROTO_PLATFORM_TYPE_AZURE_REPOS",
  PROTO_PLATFORM_TYPE_KODUS_WEB = "PROTO_PLATFORM_TYPE_KODUS_WEB",
  PROTO_PLATFORM_TYPE_BITBUCKET = "PROTO_PLATFORM_TYPE_BITBUCKET",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export enum ProtoAuthMode {
  PROTO_AUTH_MODE_UNSPECIFIED = "PROTO_AUTH_MODE_UNSPECIFIED",
  PROTO_AUTH_MODE_OAUTH = "PROTO_AUTH_MODE_OAUTH",
  PROTO_AUTH_MODE_TOKEN = "PROTO_AUTH_MODE_TOKEN",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export interface BuildEnrichedGraphRequest {
  baseRepo: RepositoryData | undefined;
  headRepo: RepositoryData | undefined;
}

export interface BuildEnrichedGraphResponse {
  data: string;
  code: number;
  error?: string | undefined;
}

export interface Auth {
  type?: ProtoAuthMode | undefined;
  token?: string | undefined;
  org?: string | undefined;
}

export interface RepositoryData {
  url: string;
  provider: ProtoPlatformType;
  branch?: string | undefined;
  auth?: Auth | undefined;
  organizationId: string;
  repositoryId: string;
  repositoryName: string;
}

export interface ASTAnalyzerServiceClient {
  buildEnrichedGraph(request: BuildEnrichedGraphRequest): Observable<BuildEnrichedGraphResponse>;
}

export interface ASTAnalyzerServiceController {
  buildEnrichedGraph(request: BuildEnrichedGraphRequest): Observable<BuildEnrichedGraphResponse>;
}

export function ASTAnalyzerServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["buildEnrichedGraph"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ASTAnalyzerService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ASTAnalyzerService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const AST_ANALYZER_SERVICE_NAME = "ASTAnalyzerService";
