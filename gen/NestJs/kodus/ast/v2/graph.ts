// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               unknown
// source: kodus/ast/v2/graph.proto

/* eslint-disable */
import { Range } from "./tree_sitter";

export enum NodeType {
  NODE_TYPE_UNSPECIFIED = "NODE_TYPE_UNSPECIFIED",
  NODE_TYPE_FILE = "NODE_TYPE_FILE",
  NODE_TYPE_IMPORT = "NODE_TYPE_IMPORT",
  NODE_TYPE_CLASS = "NODE_TYPE_CLASS",
  NODE_TYPE_INTERFACE = "NODE_TYPE_INTERFACE",
  NODE_TYPE_TYPE_ALIAS = "NODE_TYPE_TYPE_ALIAS",
  NODE_TYPE_ENUM = "NODE_TYPE_ENUM",
  NODE_TYPE_FUNCTION = "NODE_TYPE_FUNCTION",
  NODE_TYPE_FUNCTION_CALL = "NODE_TYPE_FUNCTION_CALL",
  UNRECOGNIZED = "UNRECOGNIZED",
}

/** Represents a scope */
export interface Scope {
  type: NodeType;
  name: string;
}

/** Represents a function call */
export interface Call {
  nodeId: number;
  function: string;
  file: string;
  caller?: string | undefined;
}

/** Represents file analysis information */
export interface FileAnalysis {
  defines: string[];
  calls: Call[];
  imports: string[];
  className: string[];
  usedBy?: FileAnalysis_UsedBy | undefined;
  dependencies?: FileAnalysis_Dependencies | undefined;
  nodes: Map<number, AnalysisNode>;
}

export interface FileAnalysis_UsedBy {
  files: string[];
  functions: string[];
  types: string[];
}

export interface FileAnalysis_Dependencies {
  direct: string[];
  transitive: string[];
}

export interface FileAnalysis_NodesEntry {
  key: number;
  value: AnalysisNode | undefined;
}

/** Represents detailed function analysis */
export interface FunctionAnalysis {
  nodeId: number;
  position: Range | undefined;
  file: string;
  name: string;
  params: string[];
  lines: number;
  returnType: string;
  calls: Call[];
  className?: string | undefined;
  startLine: number;
  endLine: number;
  functionHash: string;
  signatureHash: string;
  fullText?: string | undefined;
}

/** Represents detailed type analysis */
export interface TypeAnalysis {
  nodeId: number;
  position: Range | undefined;
  file: string;
  type: NodeType;
  name: string;
  fields: Map<string, string>;
  implements: string[];
  implementedBy: string[];
  extends: string[];
  extendedBy: string[];
  scope: Scope[];
}

export interface TypeAnalysis_FieldsEntry {
  key: string;
  value: string;
}

/** Represents a node in the analysis tree */
export interface AnalysisNode {
  id: number;
  name: string;
  text: string;
  type: NodeType;
  children: AnalysisNode[];
  position: Range | undefined;
}

/** Represents the complete code graph */
export interface CodeGraph {
  files: Map<string, FileAnalysis>;
  functions: Map<string, FunctionAnalysis>;
  types: Map<string, TypeAnalysis>;
}

export interface CodeGraph_FilesEntry {
  key: string;
  value: FileAnalysis | undefined;
}

export interface CodeGraph_FunctionsEntry {
  key: string;
  value: FunctionAnalysis | undefined;
}

export interface CodeGraph_TypesEntry {
  key: string;
  value: TypeAnalysis | undefined;
}
