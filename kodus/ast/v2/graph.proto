syntax = "proto3";

package kodus.ast.v2;

import "kodus/ast/v2/tree_sitter.proto";

enum NodeType {
  NODE_TYPE_UNSPECIFIED = 0;
  NODE_TYPE_FILE = 1;
  NODE_TYPE_IMPORT = 2;
  NODE_TYPE_CLASS = 3;
  NODE_TYPE_INTERFACE = 4;
  NODE_TYPE_TYPE_ALIAS = 5;
  NODE_TYPE_ENUM = 6;
  NODE_TYPE_FUNCTION = 7;
  NODE_TYPE_FUNCTION_CALL = 8;
}

// Represents a scope
message Scope {
  NodeType type = 1;
  string name = 2;
}

// Represents a function call
message Call {
  int32 node_id = 1;
  string function = 2;
  string file = 3;
  optional string caller = 4;
}

// Represents file analysis information
message FileAnalysis {
  repeated string defines = 1;
  repeated Call calls = 2;
  repeated string imports = 3;
  repeated string class_name = 4;

  message UsedBy {
    repeated string files = 1;
    repeated string functions = 2;
    repeated string types = 3;
  }
  optional UsedBy used_by = 5;

  message Dependencies {
    repeated string direct = 1;
    repeated string transitive = 2;
  }
  optional Dependencies dependencies = 6;

  map<int32, AnalysisNode> nodes = 7;
}

// Represents detailed function analysis
message FunctionAnalysis {
  int32 node_id = 1;
  Range position = 2;
  string file = 3;
  string name = 4;
  repeated string params = 5;
  int32 lines = 6;
  string return_type = 7;
  repeated Call calls = 8;
  optional string class_name = 9;
  int32 start_line = 10;
  int32 end_line = 11;
  string function_hash = 12;
  string signature_hash = 13;
  optional string full_text = 14;
}

// Represents detailed type analysis
message TypeAnalysis {
  int32 node_id = 1;
  Range position = 2;
  string file = 3;
  NodeType type = 4;
  string name = 5;
  map<string, string> fields = 6;
  repeated string implements = 7;
  repeated string implemented_by = 8;
  repeated string extends = 9;
  repeated string extended_by = 10;
  repeated Scope scope = 11;
}

// Represents a node in the analysis tree
message AnalysisNode {
  int32 id = 1;
  string name = 2;
  string text = 3;
  NodeType type = 4;
  repeated AnalysisNode children = 5;
  Range position = 6;
}

// Represents the complete code graph
message CodeGraph {
  map<string, FileAnalysis> files = 1;
  map<string, FunctionAnalysis> functions = 2;
  map<string, TypeAnalysis> types = 3;
}
